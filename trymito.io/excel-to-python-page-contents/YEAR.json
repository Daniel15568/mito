{
    "slug": ["functions", "date", "YEAR"],
    "functionNameShort": "YEAR",
    "functionNameLong": "Year Extraction",
    "relatedFunctions": ["HOUR", "MINUTE", "DAY"],
    "purpose": "Extract the year from a datetime",
    "titleCardParagraphs": [
        "Excel's YEAR function extracts the year as a number from a time value. It's especially useful when working with large datasets where you need to analyze data at yearly granularity.",
        "This page explains how to implement Excel's YEAR function in Python using pandas."
    ],
    "excelExplanation": {
        "paragraphs": [
            "The YEAR function in Excel returns the year of a time value.",
            "=YEAR(serial_number)"
        ],
        "syntaxTable": [
            {
                "parameter": "serial_number",
                "description": "The time value from which you want to extract the year.",
                "dataType": "A valid Excel time"
            }
        ],
        "examplesTable": [
            {
                "formula": "=YEAR(\"10/05/2023 12:45 PM\")",
                "description": "Extracts the year from the given time.",
                "result": "2023"
            },
            {
                "formula": "=YEAR(\"8-June-1997 2:31 PM\")",
                "description": "Extracts the year from the given time.",
                "result": "1997"
            },
            {
                "formula": "=YEAR(\"2/22/2004\")",
                "description": "Extracts the year from the given time.",
                "result": "2004"
            }
        ]
    },
    "equivalentCode": {
        "introParagraphs": [
            "Recreating Excel's YEAR function behavior in Python requires a combination of pandas operations. Here are some common implementations:"
        ],
        "codeSections": [
            {
                "title": "Extracting Year from Datetime",
                "shortTitle": "Year Extraction",
                "paragraphs": [
                    "In Excel, you can use the =YEAR function to extract the year from a datetime. Similarly, in pandas, you can the `.dt` accessor followed by the `year` attribute to extract the year.",
                    "For example, in Excel you might use =YEAR(A2). In pandas:"
                ],
                "codeLines": [
                    "df['Year'] = df['Datetime_Column'].dt.year"
                ]
            },
            {
                "title": "Converting string to datetime and then extracting year",
                "shortTitle": "String to Year",
                "paragraphs": [
                    "Often, Pandas will infer the data type of your column as string, even if the data to you looks like a date, ie: 1/2/23. In these cases, you need to convert the string to datetime before extracting the year.",
                    "To do this in pandas, first use `pd.to_datetime` to convert the column to a datetime column, and then extract the year:"
                ],
                "codeLines": [
                    "# Convert the string to datetime",
                    "df['Datetime_Column'] = pd.to_datetime(df['String_Column'])",
                    "",
                    "# Extract the year from the datetime column",
                    "df['Year'] = df['Datetime_Column'].dt.year"
                ]
            },
            {
                "title": "Grouping Data by Year",
                "shortTitle": "Grouping by Year",
                "paragraphs": [
                    "There are situations where you want to aggregate data based on year. In Excel, you might use a pivot table after extracting the year. Similarly, in pandas, after extracting the year, you can use the `groupby` method",
                    "For example, if you have a column called 'Date' and a column called 'Website Traffic', you might want to group the data by year and sum the traffic for each year."
                ],
                "codeLines": [
                    "df['Year'] = df['Date'].dt.year",
                    "grouped_data = df.groupby('Year').agg({'Website Traffic': 'sum'}).reset_index()"
                ]
            }
        ]
    },
    "commonMistakes": {
        "introParagraphs": [
            "While implementing the YEAR function equivalent in pandas, a few common pitfalls might occur. Here's how to navigate them."
        ],
        "codeSections": [
            {
                "title": "Incorrect datatypes",
                "shortTitle": "Incorrect datatypes",
                "paragraphs": [
                    "The `.dt` accessor is exclusive to pandas Series with datetime64 data types. Using it on non-datetime columns will raise an AttributeError.",
                    "For example, if you have a column called 'Date', but it actually has an object data type, you'll need to convert it to datetime before using the `.dt` accessor. You can check the data type of a column using `df.dtypes`."
                ],
                "codeLines": [
                    "# Ensure the column is of datetime dtype",
                    "df['Datetime_Column'] = pd.to_datetime(df['Datetime_Column'])",
                    "df['Year'] = df['Datetime_Column'].dt.year"
                ]
            },
            {
                "title": "Forgetting to Handle Null Values",
                "shortTitle": "Handling NaTs",
                "paragraphs": [
                    "If your dataset has missing or NaT (Not-a-Timestamp) values in the datetime column, trying to extract the year from them will result in NaN (Not a Number) values. Make sure to handle or filter them out as necessary."
                ],
                "codeLines": [
                    "# Drop rows with NaT values before extracting year",
                    "df.dropna(subset=['Datetime_Column'], inplace=True)",
                    "df['Year'] = df['Datetime_Column'].dt.year"
                ]
            }
        ]
    },
    "mitoCTA": {
        "codeLines": [
            "# Note: no need to convert the Date columns to a datetime",
            "# because Mito's YEAR formula does so automatically",
            "df['year'] = YEAR(df['Date'])"
        ]
    }
}

{
    "slug": ["functions", "misc", "XLOOKUP"],
    "functionNameShort": "XLOOKUP",
    "functionNameLong": "Lookup and Return Value",
    "relatedFunctions": ["VLOOKUP", "HLOOKUP", "INDEX MATCH"],
    "purpose": "Search for a value in one column and return a corresponding value from a different column",
    "titleCardParagraphs": [
        "Excel's XLOOKUP function is a versatile tool for searching and matching data across columns. It is a more flexible and powerful alternative to functions like VLOOKUP and HLOOKUP.",
        "This page explains how to replicate Excel's XLOOKUP functionality in Python using pandas."
    ],
    "excelExplanation": {
        "paragraphs": [
            "The XLOOKUP function in Excel searches a range for a key and returns the corresponding value from another range.",
            "=XLOOKUP(lookup_value, lookup_array, return_array, [if_not_found], [match_mode], [search_mode])"
        ],
        "syntaxTable": [
            {
                "parameter": "lookup_value",
                "description": "The value to search for.",
                "dataType": "Any"
            },
            {
                "parameter": "lookup_array",
                "description": "The array or range to search within.",
                "dataType": "Array/Range"
            },
            {
                "parameter": "return_array",
                "description": "The array or range containing the values to return.",
                "dataType": "Array/Range"
            },
            {
                "parameter": "if_not_found",
                "description": "(Optional) The value to return if no match is found. Defaults to #N/A.",
                "dataType": "Any"
            },
            {
                "parameter": "match_mode",
                "description": "(Optional) The type of match to perform. Defaults to 1.",
                "dataType": "Number"
            },
            {
                "parameter": "search_mode",
                "description": "(Optional) The type of search to perform. Defaults to 1 = search from first to last.",
                "dataType": "Number"
            }

        ],
        "examplesTable": [
            {
                "formula": "=XLOOKUP(\"Mito\", B1:B10, C1:C10)",
                "description": "Search for the word \"Mito\" within B1:B10 and return the corresponding value from C1:C10.",
                "result": "Value from C1:C10"
            },
            {
                "formula": "=XLOOKUP(\"Mito\", B1:B10, C1:C10, \"Not Found\")",
                "description": "Search for the word \"Mito\" within B1:B10 and return the corresponding value from C1:C10. If no match is found, return \"Not Found\".",
                "result": "Value from C1:C10 or \"Not Found\""
            },
            {
                "formula": "=XLOOKUP(\"Mito\", B1:B10, C1:C10, \"Not Found\", 0)",
                "description": "Search for the word \"Mito\" within B1:B10 and return the corresponding value from C1:C10. If no match is found, return \"Not Found\". Perform an exact match.",
                "result": "Value from C1:C10 or \"Not Found\""
            }
        ]
    },
    "equivalentCode": {
        "introParagraphs": [
            "To replicate the XLOOKUP function in Excel using Python and pandas, you can use the `merge` method combined with other functions. Here's a common use case:"
        ],
        "codeSections": [
            {
                "title": "Finding a match in a dataframe and returning a different column's value",
                "shortTitle": "Basic Lookup",
                "paragraphs": [
                    "In Excel, you would use the XLOOKUP function to add data from one table into another, based on a matching value.",
                    "In pandas, the equivalent functionality can be achieved using the `merge` method. Below is an exampls of how you can use the `merge` function to find matching values between two tables and return additional data from the second table.",
                    "Because the XLOOKUP function is case-insensitive, before merging the data together in pandas, convert the columns to lowercase before merging so that you'll have the same results in Excel and Python."
                ],
                "codeLines": [
                    "grades = pd.DataFrame({",
                    "    'Name': ['aaron', 'martha', 'nate', 'jake'],",
                    "    'Math': [88, 100, 89, 92],",
                    "    'English': [92, 91, 90, 94],",
                    "    'History': [95, 92, 91, 90],",
                    "    'Science': [89, 88, 90, 87],",
                    "    'Gym': [90, 92, 91, 90],",
                    "    'Art': [91, 90, 94, 92]",
                    "})",
                    "",
                    "student_records = pd.DataFrame({",
                    "    'Name': ['Martha', 'Nate', 'Aaron'],",
                    "    'Year': [2016, 2016, 2016],",
                    "})",
                    "",
                    "# Convert the Name columns to lowercase for case insensitive merge",
                    "grades['Name'] = grades['Name'].str.lower()",
                    "student_records['Name'] = student_records['Name'].str.lower()",
                    "",
                    "# Drop the colums Gym and Art from the grades DataFrame because we don't want",
                    "# to include them in the student_record. Create a tmp_df so we don't modify the",
                    "# original dataframe.",
                    "tmp_df = grades.drop(['Gym', 'Art'], axis=1)",
                    "",
                    "# Add the columns Math, English, History, and Science to the student_records DataFrame",
                    "student_records = student_records.merge(tmp_df, left_on='Name', right_on='Name')"
                ]
            }
        ]
    },
    "commonMistakes": {
        "introParagraphs": [
            "The sneakiest and most common issue when trying to recreate Excel's XLOOKUP function in Python is differences in how Excel and Python handle case sensitivity."
        ],
        "codeSections": [
            {
                "title": "Case Sensitivity",
                "shortTitle": "Case Sensitivity",
                "paragraphs": [
                    "By default, pandas' lookup functions are case-sensitive, whereas Excel's are case-insensitive. This can lead to missed matches in pandas.",
                    "To address this, you can convert both the dataframe column and the lookup value to the same case (either upper or lower) before performing the lookup."
                ],
                "codeLines": [
                    "# Convert to lowercase before lookup",
                    "df1['key'] = df['key'].str.lower()",
                    "df2['key'] = df['key'].str.lower()",
                    "",
                    "result = df1.merge(df2, on='key', how='left')"
                ]
            }
        ]
    }
}

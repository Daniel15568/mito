// Copyright (c) Mito

import React, { useEffect, useState } from 'react';
import MitoAPI from '../../jupyter/api';
import { SavedAnalysis, UIState } from '../../types';
import DefaultModal from '../DefaultModal';
import TextButton from '../elements/TextButton';
import { ModalEnum } from './modals';
import { overwriteAnalysisToReplayToMitosheetCall } from '../../jupyter/jupyterUtils';
import { isMitoError } from '../../utils/errors';
import { TaskpaneType } from '../taskpanes/taskpanes';


/**
 * This function returns a summary view of the analysis. Note that we don't do anything
 * super fancy here, as this will likely be a very rare flow as users will most often
 * trust where they are getting their notebooks from.
 */
const getAnalysisSummary = (analysis: SavedAnalysis): JSX.Element => {
    return (
        <>
            {analysis.steps_data.map((step_data, idx) => {
                return (
                    <div key={idx} className='flexbox-row text-overflow-scroll pb-10px'>
                        <div>
                            Step {idx}:{' '}
                            <span className='text-color-gray-important'>{step_data.step_type}</span>&nbsp;
                        </div>
                        <div title={JSON.stringify(step_data.params)}>
                            with params{' '}
                            <span className='text-color-gray-important'>{JSON.stringify(step_data.params)}</span>
                        </div>
                    </div>
                )
            })}   
        </>
    )
}


/*
    This modal displays to the user when they replay an analysis that was not 
    created on their computer and last edited by them. It prompts them to either
    start a new analysis, or trust this one to run it.

    # Mito's Notebook Security Model

    For future clarity, I'll use this doc string to also document how our security and privacy
    model extends to sharing notebooks.

    First, to share notebooks, we need to send the analysis with the notebook. This leaves us a 
    few options in terms of where we can store it:
    1. In a visible comment in a cell
    2. In the metadata of the notebook
    3. In the metadata of an ouput
    4. In the metadata of an input

    (1) is messy, so we don't do this for now.
    (2) makes the analysis data invisible, so you might accidently send data with your notebook
        that you don't expect, so we don't do this for now.
    (3) would not be robust, as outputs get cleared frequently, and users wouldn't understand
        why their analysis can now not be replayed
    
    Thus, storing the analysis in the metadata of an input is our best option. 

    We choose the input cell that corresponds to the generated code of that Mito analysis.
    This makes sense, as if this cell still exists, then users know that this data is in 
    the notebook, and they won't be suprised if they send this notebook elsehwere. 

    We also leave a comment in this input cell telling users that this is generated by Mito
    and that they should not edit it in place. This is the best we can do to make sure that
    this analysis doesn't go places that the user doesn't expect.
*/
const ReplayAnalysisPermissionsModal = (
    props: {
        mitoAPI: MitoAPI,
        setUIState: React.Dispatch<React.SetStateAction<UIState>>;

        analysisName: string;
        analysis: SavedAnalysis;
        potentialNewAnalysisName: string;
    }): JSX.Element => {

    const [viewSteps, setViewSteps] = useState(false);

    useEffect(() => {
        if (viewSteps) {
            void props.mitoAPI.log('clicked_view_all_steps')
        }
    }, [viewSteps])

    return (
        <DefaultModal
            header={'Do you want to trust this analysis?'}
            modalType={ModalEnum.ReplayAnalysisPermissions}
            wide
            viewComponent={
                <>
                    <div className='text-align-left text-body-1' onClick={() => setViewSteps((viewTraceback) => !viewTraceback)}>
                        The <span>analysis_to_replay</span> {props.analysisName} was last edited by someone else. Make sure you trust who sent you this notebook before running this analysis. You can {" "}
                        <span className='text-body-1-link' onClick={e => e.stopPropagation()}>
                            <a href='https://docs.trymito.io/how-to/mitos-security-model' target="_blank" rel="noreferrer"> read more about security</a>
                        </span> {' '} or {' '}
                        <span className='text-body-1-link'>
                            view all steps.
                        </span>
                    </div>
                    {viewSteps &&
                        <div 
                            className='text-align-left text-overflow-hidden text-overflow-scroll mt-5px' 
                            style={{height: '200px', border: '1px solid var(--mito-purple)', borderRadius: '2px', padding: '5px'}}
                        >
                            {getAnalysisSummary(props.analysis)}
                        </div>
                    }
                </>
            }
            buttons={
                <>
                    <TextButton
                        variant='light'
                        width='medium'
                        onClick={() => {    
                            overwriteAnalysisToReplayToMitosheetCall(
                                props.analysisName,
                                props.potentialNewAnalysisName,
                                props.mitoAPI
                            )

                            void props.mitoAPI.log('clicked_start_new_analysis_from_replay_analysis_permissions_modal')
                            
                            props.setUIState((prevUIState) => {
                                return {
                                    ...prevUIState,
                                    currOpenModal: {type: ModalEnum.None}
                                }
                            })}
                        }
                    >
                        Start New Analysis
                    </TextButton>
                    <TextButton
                        variant='dark'
                        width='medium'
                        onClick={async () => {  
                            void props.mitoAPI.log('clicked_trust_analysis')

                            const replayAnalysisError = await props.mitoAPI.updateReplayAnalysis(props.analysisName, props.analysis, undefined, true);

                            if (isMitoError(replayAnalysisError)) {
                                props.setUIState(prevUIState => {
                                    return {
                                        ...prevUIState,
                                        currOpenTaskpane: {
                                            type: TaskpaneType.UPDATEIMPORTS,
                                            failedReplayData: {
                                                analysisName: props.analysisName,
                                                analysis: props.analysis,
                                                error: replayAnalysisError,
                                                explicitlyTrustAnalysisByIgnoringAuthorHash: true
                                            }
                                        },
                                        currOpenModal: {type: ModalEnum.None}
                                    }
                                })
                            } else {
                                props.setUIState((prevUIState) => {
                                    return {
                                        ...prevUIState,
                                        currOpenModal: {type: ModalEnum.None}
                                    }
                                })}
                        }
                            
                        }
                    >
                        Trust analysis   
                    </TextButton>
                </> 
            }
        />
    )    
};

export default ReplayAnalysisPermissionsModal;
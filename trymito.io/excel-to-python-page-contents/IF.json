{
    "slug": ["functions", "conditional", "IF"],
    "functionNameShort": "IF",
    "functionNameLong": "IF",
    "relatedFunctions": ["VLOOKUP", "AND", "OR"],
    "purpose": "Use a conditional check to return one of two values.",
    "titleCardParagraphs": [
        "Excel's IF function allows you take different actions depending on the value of your data. It's a way to make dynamic decisions in your data analysis, and is often used in financial modeling and other analytical tasks.",
        "This page explains how to implement Excel's IF function in Python using pandas."
    ],
    "excelExplanation": {
        "paragraphs": [
            "The IF function in Excel is used to make conditional decisions based on a given expression or value.",
            "=IF(logical_test, value_if_true, value_if_false)"
        ],
        "syntaxTable": [
            {
                "parameter": "logical_test",
                "description": "The condition you want to test.",
                "dataType": "logical"
            },
            {
                "parameter": "value_if_true",
                "description": "The value to return if the logical_test is TRUE.",
                "dataType": "any"
            },
            {
                "parameter": "value_if_false",
                "description": "The value to return if the logical_test is FALSE.",
                "dataType": "any"
            }
        ],
        "examplesTable": [
            {
                "formula": "=IF(A1 > 10, \"Yes\", \"No\")",
                "description": "Check if the value in cell A1 is greater than 10. Return 'Yes' if true, otherwise 'No'.",
                "result": "Yes or No"
            },
            {
                "formula": "=IF(A2=B2, \"Match\", \"No Match\")",
                "description": "Check if the value in cell A2 matches the value in B2. Return 'Match' if true, otherwise 'No Match'.",
                "result": "Match or No Match"
            }
        ]
    },
    "equivalentCode": {
        "introParagraphs": [
            "To implement the functionality of the Excel IF function in pandas, there are various methods available depending on the specific requirements. Let's explore some common implementations:"
        ],
        "codeSections": [
            {
                "title": "Creating a New Column Based on Conditions",
                "shortTitle": "New Column",
                "paragraphs": [
                    "Using the `np.where` function from the `numpy` library is a convenient method to create new columns based on conditions in pandas. It is similar to the Excel IF function."
                ],
                "codeLines": [
                    "import numpy as np",
                    "", 
                    "# Check if A is greater than 10",
                    "df['Result'] = np.where(df['A'] > 10, 'Greater than 10', 'Less or equal to 10')"
                ]
            },
            {
                "title": "Use the Mito IF function",
                "shortTitle": "Mito IF",
                "paragraphs": [
                    "Mito is a Python library that implements Excel's spreadsheet formulas in pandas. Mito's IF function works exactly like the Excel IF function.",
                    "To use it, `pip install mitosheet` and then use the following code:"
                ],
                "codeLines": [
                    "# Import the mitosheet Excel functions",
                    "from mitosheet.public.v3 import *;",
                    "",
                    "# Use IF function",
                    "df['Result'] = IF(df['A'] > 10, 'Greater than 10', 'Less than 10)"
                ]
            },
            {
                "title": "Checking for equivalent values",
                "shortTitle": "Equivalent Values",
                "paragraphs": [
                    "To check if two values are equivalent, you can use the `==` operator in pandas. This is equivalent to the `=` operator in Excel. Not using a double == is one of the most common errors that users make when transitioning from Excel to Python!"
                ],
                "codeLines": [
                    "import numpy as np",
                    "", 
                    "# Check if A is equal to 10",
                    "df['Result'] = np.where(df['A'] == 10, 'A is 10', 'A is not 10')"
                ]
            },
            {
                "title": "Checking for non-equivalent values",
                "shortTitle": "Non-equivalent Values",
                "paragraphs": [
                    "To check if two values are different from eachother, you can use the `!=` operator in pandas. This is equivalent to the `<>` operator in Excel."
                ],
                "codeLines": [
                    "import numpy as np",
                    "",
                    "# Check if A is not equal to 10",
                    "df['Result'] = np.where(df['A'] != 10, 'A is not 10', 'A is 10')"
                ]
            },
            {
                "title": "Using Multiple Conditions with & (AND)",
                "shortTitle": "AND Operator",
                "paragraphs": [
                    "When you want to combine multiple conditions with an AND logic in Excel, you use the `=AND` formula. In pandas, use the '&' operator and wrap each condition in parentheses."
                ],
                "codeLines": [
                    "import numpy as np",
                    "", 
                    "# Check if A > 20 and B < 20",
                    "df['Result'] = np.where((df['A'] > 10) & (df['B'] < 20), 'Both conditions true', 'At least one condition false')"
                ]
            },
            {
                "title": "Using Multiple Conditions with | (OR)",
                "shortTitle": "OR Operator",
                "paragraphs": [
                    "When you want to combine multiple conditions with an OR logic in Excel, you the `=OR` formula. In pandas, use the '|' operator. Again, make sure to enclose each condition in parentheses."
                ],
                "codeLines": [
                    "# Check if A is equal to 10 or B is equal to 20",
                    "df['Result'] = np.where((df['A'] == 10) | (df['B'] == 20), 'Either A is 10 or B is 20', 'Neither condition met')"
                ]
            },
            {
                "title": "Multiple Conditions",
                "shortTitle": "Multiple Conditions",
                "paragraphs": [
                    "Using `np.where` is a good approach if you're only writing simple conditionals. However, if you need to construct a conditional check with lots of layers, writing them all in one nested line becomes incredibly confusing, incredibly quickly. In these cases, it's best to use `if` `else` statements instead.",
                    "`If` statements are a core part of Python. They're used to control the flow of your code, similar to the Excel IF function.",
                    "For example, if you wanted check if each cell contained 'New York', 'Philadelphia', 'San Francisco', or 'Austin', you could write the following `if` `else` statement and use an `apply` function:"
                ],
                "codeLines": [
                    "Create a function to check the city",
                    "def city_check(city):",
                    "    if city == 'New York':",
                    "        return 'East Coast'",
                    "    elif city == 'Philadelphia':",
                    "        return 'East Coast'",
                    "    elif city == 'San Francisco':",
                    "        return 'West Coast'",
                    "    elif city == 'Austin':",
                    "        return 'Central'",
                    "    else:",
                    "        return 'Other'",
                    "",
                    "df['Region'] = df['City'].apply(city_check)"
                ]
            },
            {
                "title": "Nested Conditions",
                "shortTitle": "Nested Conditions",
                "paragraphs": [
                    "You can also nest `if` statements inside each other. For example, if you wanted to check if you first want to check the state of each cell and then check the city, you could write the following:"
                ],
                "codeLines": [
                    "def location_check(city, state):",
                    "    if state == 'New York':",
                    "        if city == 'New York':",
                    "            return 'New York City'",
                    "        else:",
                    "            return 'New York State'",
                    "    elif state == 'California':",
                    "        if city == 'San Francisco':",
                    "            return 'San Francisco'",
                    "        elif city == 'LA':",
                    "            return 'LA'",
                    "        else:",
                    "            return 'California'",
                    "    else:",
                    "        return 'Other'",
                    "",
                    "df['Location'] = df.apply(lambda x: location_check(x['City'], x['State']), axis=1)"
                ]
            },
            {
                "title": "Filtering Rows Based on Condition",
                "shortTitle": "Filtering Rows",
                "paragraphs": [
                    "To filter rows in a DataFrame based on a condition, you don't need `np.where`. Instead, simply use the DataFrame indexing mechanism."
                ],
                "codeLines": [
                    "filtered_df = df[df['A'] > 10]"
                ]
            }
        ]        
    },
    "commonMistakes": {
        "introParagraphs": [
            "While using pandas to implement conditional operations similar to Excel's IF function, there are a few pitfalls that users often fall into. Here are some common mistakes and their remedies."
        ],
        "codeSections": [
            {
                "title": "Misuse of the == Operator",
                "shortTitle": "= instead of ==",
                "paragraphs": [
                    "Using a single '=' is for assignment in Python, not for comparison. For comparing values, you should use '=='.",
                    "In Excel, you might use `=IF(A1=10, 'Yes', 'No')`. In pandas, ensure you use '==' for comparison."
                ],
                "codeLines": [
                    "# Correct usage",
                    "df['Result'] = np.where(df['Column1'] == 10, 'Yes', 'No')"
                ]
            },
            {
                "title": "Incorrect Use of Boolean Operators",
                "shortTitle": "Boolean Operators",
                "paragraphs": [
                    "In pandas, you should use '&' for AND, '|' for OR, and '~' for NOT. Avoid using 'and', 'or', and 'not' directly as they don't work element-wise on series.",
                    "In Excel, `=IF(AND(A1>10, B1<20), 'Yes', 'No')`. In pandas, ensure you use '&' and enclose conditions in parentheses."
                ],
                "codeLines": [
                    "# Correct usage",
                    "df['Result'] = np.where((df['A'] > 10) & (df['B'] < 20), 'Yes', 'No')"
                ]
            },
            {
                "title": "Forgetting Parentheses Around Conditions",
                "shortTitle": "Missing Parentheses",
                "paragraphs": [
                    "When combining multiple conditions, it's crucial to enclose each condition in parentheses to ensure the logic is evaluated correctly.",
                    "In Excel, `=IF(OR(A1=10, A1=20), 'Match', 'No Match')`. In pandas, remember to use parentheses for each condition."
                ],
                "codeLines": [
                    "# Correct usage",
                    "df['Result'] = np.where((df['A'] == 10) | (df['A'] == 20), 'Match', 'No Match')"
                ]
            }
        ]
    }
}

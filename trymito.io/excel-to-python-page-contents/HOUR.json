{
    "slug": ["functions", "date", "HOUR"],
    "functionNameShort": "HOUR",
    "functionNameLong": "Hour Extraction",
    "relatedFunctions": ["MINUTE", "SECOND", "DATE"],
    "titleCardParagraphs": [
        "Excel's HOUR function extracts the hour as a number from a time value. It's especially useful when working with large datasets where you need to analyze data at an hourly granularity.",
        "This page explains how to implement Excel's HOUR function in Python using pandas, easing the transition from Excel to Python and helping automate Excel reports."
    ],
    "excelExplanation": {
        "paragraphs": [
            "The HOUR function in Excel returns the hour of a time value, ranging from 0 (12:00 AM) to 23 (11:00 PM).",
            "=HOUR(serial_number)"
        ],
        "syntaxTable": [
            {
                "parameter": "serial_number",
                "description": "The time value from which you want to extract the hour.",
                "dataType": "A valid Excel time"
            }
        ],
        "examplesTable": [
            {
                "formula": "=HOUR(\"09:30 AM\")",
                "description": "Extracts the hour from the given time.",
                "result": "9"
            },
            {
                "formula": "=HOUR(\"09:30 PM\")",
                "description": "Extracts the hour from the given time.",
                "result": "21"
            },
            {
                "formula": "=HOUR(\"29-May-2021 6:00 AM\")",
                "description": "Extracts the hour from the given time.",
                "result": "6"
            }
        ]
    },
    "equivalentCode": {
        "introParagraphs": [
            "Recreating Excel's HOUR function behavior in Python requires a combination of pandas operations. Here are some common implementations:"
        ],
        "codeSections": [
            {
                "title": "Extracting Hour from Datetime",
                "shortTitle": "Datetime Extraction",
                "paragraphs": [
                    "In Excel, if you have a datetime value, you might use the HOUR function directly to get the hour. Similarly, in pandas, you use the `.dt` accessor followed by the `hour` attribute.",
                    "For example, in Excel you might use =HOUR(A2). In pandas:"
                ],
                "codeLines": [
                    "df['Hour'] = df['Datetime_Column'].dt.hour"
                ]
            },
            {
                "title": "Converting string to datetime and then extracting hour",
                "shortTitle": "String to Hour",
                "paragraphs": [
                    "Often, Pandas will infer the data type of your column as string, even if the data to you looks like a date, ie: 1/2/23. In these cases, you need to convert the string to datetime before extracting the hour.",
                    "To do this in pandas, first convert use `pd.to_datetime` to convert the column to a datetime columns, and then extract the hour:"
                ],
                "codeLines": [
                    "# Convert the string to datetime",
                    "df['Datetime_Column'] = pd.to_datetime(df['String_Column'])",
                    "",
                    "# Extract the hour from the datetime column",
                    "df['Hour'] = df['Datetime_Column'].dt.hour"
                ]
            },
            {
                "title": "Grouping Data by Hour",
                "shortTitle": "Grouping by Hour",
                "paragraphs": [
                    "There are situations where you want to aggregate data based on hours. In Excel, you might use a pivot table after extracting the hour. Similarly, in pandas, after extracting the hour, you can use the `groupby` method",
                    "For example, if you have a column called 'Date' and a column called 'Website Traffic', you might want to group the data by hour and sum the traffic for each hour."
                ],
                "codeLines": [
                    "df['Hour'] = df['Date'].dt.hour",
                    "grouped_data = df.groupby('Hour').agg({'Website Traffic': 'sum'}).reset_index()"
                ]
            }
        ]
    },
    "commonMistakes": {
        "introParagraphs": [
            "While implementing the HOUR function equivalent in pandas, a few common pitfalls might occur. Here's how to navigate them."
        ],
        "codeSections": [
            {
                "title": "Incorrect datatypes",
                "shortTitle": "Incorrect datatypes",
                "paragraphs": [
                    "The `.dt` accessor is exclusive to pandas Series with datetime64 data types. Using it on non-datetime columns will raise an AttributeError.",
                    "For example, if you have a column called 'Date', but it actually has an object data type, you'll need to convert it to datetime before using the `.dt` accessor. You can check the data type of a column using `df.dtypes`."
                ],
                "codeLines": [
                    "# Ensure the column is of datetime dtype",
                    "df['Datetime_Column'] = pd.to_datetime(df['Datetime_Column'])",
                    "df['Hour'] = df['Datetime_Column'].dt.hour"
                ]
            },
            {
                "title": "Ignoring Timezone Information",
                "shortTitle": "Timezone Issues",
                "paragraphs": [
                    "If your datetime data contains timezone information, directly extracting hours without considering the timezone can lead to incorrect results. Before operating with data, you might want to convert it to a specific timezone.",
                    "Note that you can only convert to a specific timezone if your datetime data has timezone information. If it doesn't, you'll need to add timezone information first."
                ],
                "codeLines": [
                    "# First, localize the timestamps to a specific timezone (e.g., 'UTC')",
                    "df['Date'] = df['Date'].dt.tz_localize('UTC')",
                    "",
                    "# Now, convert the timestamps to the desired timezone",
                    "df['Date'] = df['Date'].dt.tz_convert('US/Eastern')"
                ]
            },
            {
                "title": "Forgetting to Handle Null Values",
                "shortTitle": "Handling NaTs",
                "paragraphs": [
                    "If your dataset has missing or NaT (Not-a-Timestamp) values in the datetime column, trying to extract hours from them will result in NaN (Not a Number) values. Make sure to handle or filter them out as necessary."
                ],
                "codeLines": [
                    "# Drop rows with NaT values before extracting hour",
                    "df.dropna(subset=['Datetime_Column'], inplace=True)",
                    "df['Hour'] = df['Datetime_Column'].dt.hour"
                ]
            }
        ]
    }
}

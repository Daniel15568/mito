import os
import sys
from typing import Any, Dict, Tuple

from mitosheet.types import StepsManagerType


def get_minute_and_hour_from_time(time: str) -> Tuple[str, str]:
    hour = time.split(':')[0]
    minute = time.split(':')[1]

    # Handle AM and PM
    if time.endswith('AM'):
        if hour == '12':
            hour = '0'
    elif time.endswith('PM'):
        if hour != '12':
            hour = str(int(hour) + 12)

    return hour, minute

def get_cron_string_from_schedule(schedule: Dict[str, Any]) -> str:
    if schedule['type'] == 'Every Day':
        hour, minute = get_minute_and_hour_from_time(schedule['time'])
        return f'{minute} {hour} * * *'

    elif schedule['type'] == 'Every Week':
        hour, minute = get_minute_and_hour_from_time(schedule['time'])
        day_of_week = schedule['dayOfWeek']
        return f'{minute} {hour} * * {day_of_week}'

    elif schedule['type'] == 'Every Month':
        hour, minute = get_minute_and_hour_from_time(schedule['time'])
        day_of_month = schedule['dayOfMonth']
        return f'{minute} {hour} {day_of_month} * *'

    else:
        raise Exception(f"Invalid schedule type: {schedule['type']}")
    
def get_requirements_txt_file() -> str:
    from mitosheet import __version__ as mitosheet_version
    if mitosheet_version == '0.3.131': # Handle development version
        mitosheet_version = '0.1.528'

    from pandas import __version__ as pandas_version
    return f"""
mitosheet=={mitosheet_version}
pandas=={pandas_version}
"""
    

def get_github_workflow_file(
        automation_name: str,
        file_base_folder: str,
        schedule: Dict[str, Any]    
    ) -> str:

    cron_string = get_cron_string_from_schedule(schedule)
    # Get the current Python version as a string of 3.10, for example
    python_version = f"{sys.version_info.major}.{sys.version_info.minor}"
    
    return f"""
name: "Automation: {automation_name}"
on:
  schedule:
    - cron: {cron_string}
  workflow_dispatch: null
  pull_request:
    branches:
        - main
    
jobs:
  run_automation:
    name: "Run {automation_name}"
    runs-on: ubuntu-latest      
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python {python_version}
        uses: actions/setup-python@v4
        with:
          python-version: {python_version}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r {file_base_folder}/requirements.txt
      - name: Run automation
        run: python {file_base_folder}/automation.py
"""

def get_readme_file(
        automation_name: str,
        automation_description: str
    ) -> str:
    return f"""
# {automation_name}

{automation_description}

This automation was generated by Mito. To learn more about Mito, visit https://trymito.io.
"""

def get_automation_files_for_new_automation(
        steps_manager: StepsManagerType, 
        automation_name: str,
        automation_description: str,
        file_base_folder: str,
        schedule: Dict[str, Any]
    ) -> Dict[str, str]:
    """
    Returns the new files 
    new_files

    new_files
    """
    new_files: Dict[str, str] = {}

    # First, we get the CSV and Excel files the user has importer
    import_params = [param for param in steps_manager.param_metadata if param['type'] == 'import']
    file_paths = [param['original_value'] for param in import_params if 'file' in param['subtype'] and param['original_value'] is not None]

    for file_path in file_paths:
        file_name = os.path.basename(file_path)
        new_files[f'{file_base_folder}/data/{file_name}'] = open(file_path).read()

    # Then, we get these files from the parameters as the function call to the function
    new_files[f'{file_base_folder}/automation.py'] = steps_manager.fully_parameterized_function
    
    # Setup a requirements.txt file
    new_files[f'{file_base_folder}/requirements.txt'] = get_requirements_txt_file()

    # Then, we add the Github Actions workflow file
    new_files[f'.github/workflows/automation.yml'] = get_github_workflow_file(automation_name, file_base_folder, schedule)

    # Finally, we add a README file
    new_files[f'{file_base_folder}/README.md'] = get_readme_file(automation_name, automation_description)

    return new_files